local M = {}

local palette = require("eyes.palette").palette
local utility = require("eyes.utility")
local hl = utility.hl

M.indent = function()
	hl("SnacksIndent", { fg = palette.hex03 })
	hl("SnacksIndent1", { fg = palette.hex01 })
	hl("SnacksIndent2", { fg = palette.hex02 })
	hl("SnacksIndent3", { fg = palette.hex03 })
	hl("SnacksIndent4", { fg = palette.hex04 })
	hl("SnacksIndent5", { fg = palette.hex05 })
	hl("SnacksIndent6", { fg = palette.hex06 })
	hl("SnacksIndent7", { fg = palette.hex07 })
	hl("SnacksIndent8", { fg = palette.hex08 })
	hl("SnacksIndentBlank", { link = "Dim" })
	hl("SnacksIndentChunk", { link = "Special" })
	hl("SnacksIndentScope", { link = "Special" })
end

M.input = function()
	hl("SnacksInputNormal", { link = "Normal" })
	hl("SnacksInputBorder", { link = "Border" })
	hl("SnacksInputTitle", { link = "Title" })
	hl("SnacksInputPrompt", { link = "SnacksInputTitle" })
	hl("SnacksInputIcon", { link = "Icon" })
end

M.picker = function()
	hl("SnacksPicker", { link = "NormalFloat" })
	hl("SnacksPickerTitle", { link = "FloatTitle" })
	hl("SnacksPickerBorder", { link = "FloatBorder" })
	hl("SnacksPickerFooter", { link = "FloatFooter" })
	hl("SnacksPickerCursorLine", { link = "CursorLine" })

	hl("SnacksPickerInput", { link = "SnacksPicker" })
	hl("SnacksPickerInputTitle", { link = "SnacksPickerTitle" })
	hl("SnacksPickerInputBorder", { link = "SnacksPickerBorder" })
	hl("SnacksPickerInputFooter", { link = "SnacksPickerFooter" })
	hl("SnacksPickerInputCursorLine", { link = "SnacksPickerCursorLine" })
	hl("SnacksPickerInputSearch", { link = "Search" })
	hl("SnacksPickerPrompt", { link = "Special" })

	hl("SnacksPickerPreview", { link = "SnacksPicker" })
	hl("SnacksPickerPreviewTitle", { link = "SnacksPickerTitle" })
	hl("SnacksPickerPreviewBorder", { link = "SnacksPickerBorder" })
	hl("SnacksPickerPreviewFooter", { link = "SnacksPickerFooter" })
	hl("SnacksPickerPreviewCursorLine", { link = "SnacksPickerCursorLine" })

	hl("SnacksPickerList", { link = "SnacksPicker" })
	hl("SnacksPickerListTitle", { link = "SnacksPickerTitle" })
	hl("SnacksPickerListBorder", { link = "SnacksPickerBorder" })
	hl("SnacksPickerListFooter", { link = "SnacksPickerFooter" })
	hl("SnacksPickerListCursorLine", { link = "SnacksPickerCursorLine" })

	hl("SnacksPickerBox", { link = "SnacksPicker" })
	hl("SnacksPickerBoxTitle", { link = "SnacksPickerTitle" })
	hl("SnacksPickerBoxBorder", { link = "SnacksPickerBorder" })
	hl("SnacksPickerBoxFooter", { link = "SnacksPickerFooter" })
	hl("SnacksPickerBoxCursorLine", { link = "SnacksPickerCursorLine" })

	hl("SnacksPickerSelected", { fg = "fg" })
	hl("SnacksPickerSpinner", { link = "Dim" })
	hl("SnacksPickerTotals", { link = "Dim" })
	hl("SnacksPickerSearch", { link = "Search" })
	hl("SnacksPickerMatch", { link = "PmenuMatch" })
	hl("SnacksPickerIndent", { link = "Dim" })
	hl("SnacksPickerRow", { link = "Special" })
	hl("SnacksPickerCol", { link = "Special" })
	hl("SnacksPickerIdx", { link = "Special" })
	hl("SnacksPickerRegister", { link = "Special" })
	hl("SnacksPickerLabel", { link = "Special" })
	hl("SnacksPickerCode", { link = "@markup.raw.markdown_inline" })

	hl("SnacksPickerBold", { link = "Bold" })
	hl("SnacksPickerComment", { link = "Comment" })
	hl("SnacksPickerDelim", { link = "Delimiter" })
	hl("SnacksPickerDimmed", { link = "Dim" })
	hl("SnacksPickerItalic", { link = "Italic" })
	hl("SnacksPickerSpecial", { link = "Special" })

	hl("SnacksPickerDir", { fg = "fg" })
	hl("SnacksPickerFile", { fg = "fg" })

	hl("SnacksPickerBufNr", { link = "Special" })
	hl("SnacksPickerBufFlags", { link = "Special" })

	hl("SnacksPickerAuEvent", { link = "Special" })
	hl("SnacksPickerAuPattern", { link = "Special" })
	hl("SnacksPickerAuGroup", { fg = "fg" })

	hl("SnacksPickerKeymapLhs", { link = "Special" })
	hl("SnacksPickerKeymapMode", { link = "Special" })
	hl("SnacksPickerKeymapRhs", { link = "Special" })

	hl("SnacksPickerManPage", { link = "Special" })
	hl("SnacksPickerManSection", { link = "Special" })

	hl("SnacksPickerDiagnosticCode", { link = "Special" })
	hl("SnacksPickerDiagnosticSource", { link = "Dim" })

	hl("SnacksPickerGitBreaking", { link = "Error" })
	hl("SnacksPickerGitCommit", { link = "Special" })
	hl("SnacksPickerGitDate", { link = "Special" })
	hl("SnacksPickerGitIssue", { link = "Special" })
	hl("SnacksPickerGitScope", { link = "Italic" })
	hl("SnacksPickerGitType", { link = "Bold" })

	hl("SnacksPickerGitStatus", { link = "Changed" })
	hl("SnacksPickerGitStatusAdded", { link = "Added" })
	hl("SnacksPickerGitStatusModified", { link = "Changed" })
	hl("SnacksPickerGitStatusCopied", { link = "Changed" })
	hl("SnacksPickerGitStatusUntracked", { link = "Changed" })
	hl("SnacksPickerGitStatusRenamed", { link = "Changed" })
	hl("SnacksPickerGitStatusDeleted", { link = "Removed" })

	hl("SnacksPickerIconArray", { link = "Icon" })
	hl("SnacksPickerIconBoolean", { link = "Icon" })
	hl("SnacksPickerIconClass", { link = "Icon" })
	hl("SnacksPickerIconConstant", { link = "Icon" })
	hl("SnacksPickerIconConstructor", { link = "Icon" })
	hl("SnacksPickerIconEnum", { link = "Icon" })
	hl("SnacksPickerIconEnumMember", { link = "Icon" })
	hl("SnacksPickerIconEvent", { link = "Icon" })
	hl("SnacksPickerIconField", { link = "Icon" })
	hl("SnacksPickerIconFile", { link = "Icon" })
	hl("SnacksPickerIconFunction", { link = "Icon" })
	hl("SnacksPickerIconInterface", { link = "Icon" })
	hl("SnacksPickerIconKey", { link = "Icon" })
	hl("SnacksPickerIconMethod", { link = "Icon" })
	hl("SnacksPickerIconModule", { link = "Icon" })
	hl("SnacksPickerIconNamespace", { link = "Icon" })
	hl("SnacksPickerIconNull", { link = "Icon" })
	hl("SnacksPickerIconNumber", { link = "Icon" })
	hl("SnacksPickerIconObject", { link = "Icon" })
	hl("SnacksPickerIconOperator", { link = "Icon" })
	hl("SnacksPickerIconPackage", { link = "Icon" })
	hl("SnacksPickerIconProperty", { link = "Icon" })
	hl("SnacksPickerIconString", { link = "Icon" })
	hl("SnacksPickerIconStruct", { link = "Icon" })
	hl("SnacksPickerIconTypeParameter", { link = "Icon" })
	hl("SnacksPickerIconVariable", { link = "Icon" })
end

M.setup = function()
	M.indent()
	M.input()
	M.picker()
end

return M
